!function(root,$){root.ghcommits={repo_name:"mjaalnir/bootstrap-colorpicker",cache_enabled:!0,cache_ttl:7200,onload:{},callback:function(){},load:function(count,onload){var $self=this;if(count=count||10,$self.onload=onload||function(){},$self.cache_enabled&&root.localStorage){var cache_key="repo_commits",expiration=localStorage.getItem(cache_key+"_expiration");expiration&&expiration<+new Date&&(localStorage.removeItem(cache_key),localStorage.removeItem(cache_key+"_expiration"),expiration=!1);var commits=localStorage.getItem(cache_key);if(commits)return root.console&&console.info("Commit data feched from localStorage"),$self.store(JSON.parse(commits),!1),void $self.onload($self.data)}$self.query(count)},store:function(commitsJson,cache){var $self=this;$self.data=commitsJson,cache&&root.localStorage&&(localStorage.setItem("repo_commits",JSON.stringify(commitsJson)),localStorage.setItem("repo_commits_expiration",+new Date+1e3*$self.cache_ttl))},query:function(count){var $self=this,query_url="https://api.github.com/repos/"+$self.repo_name+"/commits?per_page="+count;console.info("Fetching commit data from "+query_url),$.ajax({dataType:"jsonp",url:query_url,jsonpCallback:"ghcommits._jsonpcb"})},_jsonpcb:function(jsonpresp){ghcommits.store(jsonpresp.data,ghcommits.cache_enabled),ghcommits.onload(ghcommits.data)}},$(function(){try{ghcommits.load(10,function(data){data&&data.length>0&&$(data).each(function(i,item){$("#changelog ul").append($("<li>").html("<b>"+item.commit.author.date.replace("T"," ").replace("Z","")+":</b> "+item.commit.message))})})}catch(err){}})}(window,window.jQuery);