define("parsley/validator",["validator"],function(Validator){var ParsleyValidator=function(validators,catalog){this.__class__="ParsleyValidator",this.Validator=Validator,this.locale="en",this.init(validators||{},catalog||{})};return ParsleyValidator.prototype={init:function(validators,catalog){this.catalog=catalog;for(var name in validators)this.addValidator(name,validators[name].fn,validators[name].priority);$.emit("parsley:validator:init")},setLocale:function(locale){if("undefined"==typeof this.catalog[locale])throw new Error(locale+" is not available in the catalog");return this.locale=locale,this},addCatalog:function(locale,messages,set){return"object"==typeof messages&&(this.catalog[locale]=messages),!0===set?this.setLocale(locale):this},addMessage:function(locale,name,message){return void 0===typeof this.catalog[locale]&&(this.catalog[locale]={}),this.catalog[locale][name.toLowerCase()]=message,this},validate:function(){return(new this.Validator.Validator).validate.apply(new Validator.Validator,arguments)},addValidator:function(name,fn,priority){return this.validators[name.toLowerCase()]=function(requirements){return $.extend((new Validator.Assert).Callback(fn,requirements),{priority:priority})},this},updateValidator:function(name,fn,priority){return addValidator(name,fn,priority)},removeValidator:function(name){return delete this.validators[name],this},getErrorMessage:function(constraint){var message;return message="type"===constraint.name?this.catalog[this.locale][constraint.name][constraint.requirements]:this.formatMessage(this.catalog[this.locale][constraint.name],constraint.requirements),""!==message?message:this.catalog[this.locale].defaultMessage},formatMessage:function(string,parameters){if("object"==typeof parameters){for(var i in parameters)string=this.formatMessage(string,parameters[i]);return string}return"string"==typeof string?string.replace(new RegExp("%s","i"),parameters):""},validators:{notblank:function(){return $.extend((new Validator.Assert).NotBlank(),{priority:2})},required:function(){return $.extend((new Validator.Assert).Required(),{priority:512})},type:function(type){var assert;switch(type){case"email":assert=(new Validator.Assert).Email();break;case"number":assert=(new Validator.Assert).Regexp("^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$");break;case"integer":assert=(new Validator.Assert).Regexp("^-?\\d+$");break;case"digits":assert=(new Validator.Assert).Regexp("^\\d+$");break;case"alphanum":assert=(new Validator.Assert).Regexp("^\\w+$","i");break;case"url":assert=(new Validator.Assert).Regexp("(https?:\\/\\/)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)","i");break;default:throw new Error("validator type `"+type+"` is not supported")}return $.extend(assert,{priority:256})},pattern:function(regexp){var flags="";return/^\/.*\/(?:[gimy]*)$/.test(regexp)&&(flags=regexp.replace(/.*\/([gimy]*)$/,"$1"),regexp=regexp.replace(new RegExp("^/(.*?)/"+flags+"$"),"$1")),$.extend((new Validator.Assert).Regexp(regexp,flags),{priority:64})},minlength:function(value){return $.extend((new Validator.Assert).Length({min:value}),{priority:30,requirementsTransformer:function(){return"string"!=typeof value||isNaN(value)?value:parseInt(value,10)}})},maxlength:function(value){return $.extend((new Validator.Assert).Length({max:value}),{priority:30,requirementsTransformer:function(){return"string"!=typeof value||isNaN(value)?value:parseInt(value,10)}})},length:function(array){return $.extend((new Validator.Assert).Length({min:array[0],max:array[1]}),{priority:32})},mincheck:function(length){return this.minlength(length)},maxcheck:function(length){return this.maxlength(length)},check:function(array){return this.length(array)},min:function(value){return $.extend((new Validator.Assert).GreaterThanOrEqual(value),{priority:30,requirementsTransformer:function(){return"string"!=typeof value||isNaN(value)?value:parseInt(value,10)}})},max:function(value){return $.extend((new Validator.Assert).LessThanOrEqual(value),{priority:30,requirementsTransformer:function(){return"string"!=typeof value||isNaN(value)?value:parseInt(value,10)}})},range:function(array){return $.extend((new Validator.Assert).Range(array[0],array[1]),{priority:32,requirementsTransformer:function(){for(var i=0;i<array.length;i++)array[i]="string"!=typeof array[i]||isNaN(array[i])?array[i]:parseInt(array[i],10);return array}})},equalto:function(value){return $.extend((new Validator.Assert).EqualTo(value),{priority:256,requirementsTransformer:function(){return $(value).length?$(value).val():value}})}}},ParsleyValidator});